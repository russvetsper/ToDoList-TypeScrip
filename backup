interface ITask {
  description: string;
  done: boolean;
  priority: string;
  markDone(): void;
  assignedTo?: IPerson;
}

interface IPerson {
  name: string;
  email: string;
}


class Task implements ITask {
  done: boolean = false;
  constructor(public description: string, public priority: string, public assignedTo?: IPerson){}
  markDone(){
    this.done = true;
  }
}

class HomeTask extends Task {
  constructor(public description: string, public priority: string, public assignedTo?: IPerson){
    super(description, priority);
  }
}

class WorkTask extends Task {
  constructor(public dueDate: Date, public description: string, priority: string, public assignedTo: IPerson) {
    super(description, priority, assignedTo);
  }
}

class HobbyTask extends Task {
  constructor(public description: string){
    super(description, "low");
  }
}

var tasks: Task[] = [];

tasks.push(new HomeTask("Do the dishes.", "High"));
tasks.push(new HomeTask("Buy chocolate.", "Low"));
tasks.push(new HomeTask("Wash the laundry.", "High"));
tasks[0].markDone(); // mark the first task as done.

tasks.push(new HobbyTask("Practice origami."));
tasks.push(new HobbyTask("Bake a pie."));

var today = new Date();  // get the current date and store it in the variable called 'today'
var tomorrow = today;   // set the variable tomorrow equal to the current date, but then reset it to today's date plus 1.
tomorrow.setDate(today.getDate() + 1);
var nextDay = today;  // create another date object and set it to today's date plus 2.
nextDay.setDate(today.getDate() + 2);

var diane: IPerson ={
  name: "Diane D",
  email: "diane@epicodus.com"
}

var thor: IPerson = {
  name: "Thor son of Odin",
  email: "thor@asgard.com"
}

var loki: IPerson = {
  name: "god of mischief",
  email: "loki@geocities.com"
}

tasks.push(new WorkTask(today, "Update website.", "High", diane));
tasks.push(new WorkTask(tomorrow, "Go to meeting.", "Medium", thor));
tasks.push(new WorkTask(nextDay, "Clean ceiling.", "Low", loki));



console.log(tasks);
